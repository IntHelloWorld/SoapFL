{
    "TestBehaviorAnalysis": {
        "assistant_role_name": "Test Code Reviewer",
        "user_role_name": "Test Code Reviewer",
        "phase_prompt": [
            "One or more tests in the test suite \"{test_suite}\" failed.",
            "Failed tests: ",
            "\"{failed_tests}\"",
            "According to the codes of the failed tests and the related utility methods listed below: ",
            "Test Codes: ",
            "\"{test_codes}\"",
            "Test Utility Methods: ",
            "\"{test_utility_methods}\"",
            "As the {assistant_role}, you will explain the code logic of each test in as much detail as possible.",
            "When you explain each test, please also including the code logic of the test utility methods called by the test.",
            "Your answer will follow the format:",
            "'''\n1) explanation for test one;\n2) explanation for test two;\n...\n'''"
        ]
    },
    "TestFailureAnalysis": {
        "assistant_role_name": "Software Test Engineer",
        "user_role_name": "Software Test Engineer",
        "phase_prompt": [
            "One or more tests in the test suite \"{test_suite}\" failed due to a single bug.",
            "Failed tests: ",
            "\"{failed_tests}\"",
            "According to the test code, error stack trace and test output of each failed test, and the behaviors of the failed tests listed below: ",
            "{test_infos}",
            "Test Behaviors: ",
            "\"{test_behavior}\"",
            "As the {assistant_role}, you will think step by step to: (1) identify the common patterns or similarities of the above test failures, and (2) recommend possible defect which can cause all tests to fail.",
            "You should only answering the above question and do not need to provide any further suggestion."
        ]
    },
    "SearchSuspiciousClass": {
        "assistant_role_name": "Software Architect",
        "user_role_name": "Software Architect",
        "phase_prompt": [
            "One or more tests in the test suite \"{test_suite}\" failed due to a single bug.",
            "Failed tests: ",
            "\"{failed_tests}\"",
            "According to the test code, error stack trace and test output of each failed test , the possible causes of the test failures, and the name and documentation of the classes that covered by all of the failed tests listed below: ",
            "{test_infos}",
            "Possible Causes: ",
            "\"{test_failure_causes}\"",
            "Covered Classes List: ",
            "{covered_classes}",
            "As the {assistant_role}, you will recommend what covered classes are most likely to be problematic given the above test failure information and possible causes. Please make sure that you must ONLY select classes from the Covered Classes List, the fewer classes you choose, the better, no more than {num_selected_classes} at most.",
            "You should emphasize the full name of the recommended classes in your response with pound sign, e.g., \"... the class #com.google.ClassName# is suspicious, ...\"."
        ]
    },
    "MethodDocEnhancement": {
        "assistant_role_name": "Source Code Reviewer",
        "user_role_name": "Source Code Reviewer",
        "phase_prompt": [
            "Class {class_name} was covered during testing, the documentation of the class is \"{class_documentation}\".",
            "According to the covered methods in the class:",
            "Covered Methods List:",
            "{methods}",
            "As the {assistant_role}, you will analyze the method call relationship to generate a comment for each covered method.",
            "For each covered method, if this method calls other methods in the Covered Methods List, you must explicitly claim the covered methods that called by this method in the comment, e.g., \"... this method calls method \"process\" to do something ...\".",
            "You should response with a table in markdown format, for example:",
            "| Method Full Name | Method Comment |\n| --- | --- |\n| com.google.ClassName$InnerClassName::MethodName(Args) | The method comment |"
        ]
    },
    "SearchSuspiciousMethods": {
        "assistant_role_name": "Software Architect",
        "user_role_name": "Software Architect",
        "phase_prompt": [
            "One or more tests in the test suite \"{test_suite}\" failed due to a single bug:",
            "Failed tests: ",
            "\"{failed_tests}\"",
            "The existing analysis result shows that the class {class_name} is suspicious, the documentation of the class is \"{class_documentation}\".",
            "According to the test code, error stack trace and test output of each failed test , the possible causes of the test failures, and the name and comments of methods in the class {class_name} listed below: ",
            "{test_infos}",
            "Possible Causes: ",
            "\"{test_failure_causes}\"",
            "Methods List: ",
            "{methods_list}",
            "As the {assistant_role}, you will recommend what methods in the class {class_name} are most likely the exactly location need to be fixed. Please make sure that you must ONLY select methods from the Methods List, the fewer methods you choose, the better, no more than {num_selected_methods} at most.",
            "You should emphasize the full name of the recommended methods in your response with pound sign, e.g., \"... the method #com.google.ClassName$InnerClassName::MethodName(Args)# may need to be fixed, ...\"."
        ]
    },
    "MethodReview": {
        "assistant_role_name": "Software Test Engineer",
        "user_role_name": "Software Test Engineer",
        "phase_prompt": [
            "One or more tests in the test suite \"{test_suite}\" failed due to a single bug:",
            "Failed tests: ",
            "\"{failed_tests}\"",
            "The existing analysis result shows that the method {method_name} may be problematic.",
            "According to the test code, error stack trace and test output of each failed test , the possible causes of the test failures, and the information of the suspicious method listed below: ",
            "{test_infos}",
            "Suspicious Method Full Name: \"{method_name}\"",
            "Class of the Suspicious Method: \"{class_name}\"",
            "Documentation of the Class: \"{class_doc}\"",
            "Suspicious Method Comment: \"{method_doc}\"",
            "Suspicious Method Code:",
            "\"{method_code}\"",
            "As the {assistant_role}, you will determine if this suspicious method is the exactly location that need to be fixed.",
            "You should reply with following rules:",
            "1. If the suspicious method is the exactly location that need to be fixed, the line should start with a single word <BUGGY>, followed by the reason why this method causes the test failures, e.g., \"<BUGGY> This method causes the test failures, because ...\".",
            "2. Otherwise, if this method is not responsible for the test failures or you cannot determine, the line should start with a single word <OK>, e.g., \"<OK> This method seems not responsible for the test failures ...\"."
            
        ]
    },
    "LanguageChoose": {
        "assistant_role_name": "Chief Technology Officer",
        "user_role_name": "Chief Executive Officer",
        "phase_prompt": [
            "According to the new user's task and some creative brainstorm ideas listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Ideas: \"{ideas}\".",
            "We have decided to complete the task through a executable software implemented via a programming language. ",
            "As the {assistant_role}, to satisfy the new user's demand and make the software realizable, you should propose a concrete programming language. If python can complete this task via Python, please answer Python; otherwise, answer another programming language (e.g., Java, C++, etc,).",
            "Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words or reasons, return only one line using the format: \"<INFO> *\" where \"*\" represents a programming language."
        ]
    },
    "Coding": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Technology Officer",
        "phase_prompt": [
            "According to the new user's task and our software designs listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas:\"{ideas}\"",
            "We have decided to complete the task through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the new user's demands, you should write one or multiple files and make sure that every detail of the architecture is, in the end, implemented as code. {gui}",
            "Think step by step and reason yourself to the right decisions to make sure we get it right.",
            "You will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.",
            "Then you will output the content of each file including complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "'''",
            "DOCSTRING",
            "'''",
            "CODE",
            "```",
            "You will start with the \"main\" file, then go to the ones that are imported by that file, and so on.",
            "Please note that the code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python)."
        ]
    },
    "ArtDesign": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Creative Officer",
        "phase_prompt": [
            "Our developed source codes and corresponding test reports are listed below: ",
            "Task: \"{task}\".",
            "Programming Language: \"{language}\"",
            "Source Codes:",
            "\"{codes}\"",
            "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "'''",
            "DOCSTRING",
            "'''",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), we will discuss and design many decorative images for GUI decoration. Now, we keep discussing the GUI beautification by listing some functionally independent elements in GUI that are being considered to be decorated by different pictures. For example, ten digits (0-9) in a calculator are functionally independent.",
            "To answer, use the format: \" FILENAME.png: DESCRIPTION\" where \"FILENAME\" is the filename of the image and \"DESCRIPTION\" denotes the detailed description of the independent elements. For example:",
            "'''",
            "button_1.png: The button with the number \"1\" on it.",
            "button_multiply.png: The button with the multiplication symbol (\"*\") on it.",
            "background.png: the background color to decorate the Go game",
            "'''",
            "Now, list all functionally independent elements as much as possible."
        ]
    },
    "ArtIntegration": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Creative Officer",
        "phase_prompt": [
            "Our developed source codes and corresponding test reports are listed below: ",
            "Task: \"{task}\".",
            "Programming Language: \"{language}\"",
            "Source Codes:",
            "\"{codes}\"",
            "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "'''",
            "DOCSTRING",
            "'''",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), you will incorporate our designed images for GUI decoration. Here are some ready-made high-quality pictures and corresponding descriptions:",
            "{images}",
            "Note that the designed images have a fixed size of 256x256 pixels and the images are located in the same directory as all the Python files; please dynamically scaling these images according to the size of GUI, and use \"self.*\" to avoid displaying-related problems caused by automatic garbage collection. For example:",
            "```",
            "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
            "```",
            "Now, use some or all of the pictures into the GUI to make it more beautiful and creative. Output codes strictly following the required format mentioned above."
        ]
    },
    "CodeComplete": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Technology Officer",
        "phase_prompt": [
            "According to the new user's task and our software designs listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Codes:",
            "\"{codes}\"",
            "Unimplemented File:",
            "\"{unimplemented_file}\"",
            "In our software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "'''",
            "DOCSTRING",
            "'''",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the complete function of our developed software, you have to implement all methods in the {unimplemented_file} file which contains a unimplemented class. Now, implement all methods of the {unimplemented_file} and all other codes needed, then output the fully implemented codes, strictly following the required format."
        ]
    },
    "CodeReviewComment": {
        "assistant_role_name": "Test Code Reviewer",
        "user_role_name": "Programmer",
        "phase_prompt": [
            "According to the new user's task and our software designs: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes:",
            "\"{codes}\"",
            "As the {assistant_role}, to make the software directly operable without further coding, ChatDev have formulated the following regulations:",
            "1) all referenced classes should be imported;",
            "2) all methods should be implemented;",
            "3) all methods need to have the necessary comments;",
            "4) no potential bugs;",
            "5) The entire project conforms to the tasks proposed by the user;",
            "6) most importantly, do not only check the errors in the code, but also the logic of code. Make sure that user can interact with generated software without losing any feature in the requirement;",
            "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
        ]
    },
    "CodeReviewModification": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Test Code Reviewer",
        "phase_prompt": [
            "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes: ",
            "\"{codes}\"",
            "Comments on Codes:",
            "\"{comments}\"",
            "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
            "FILENAME",
            "```LANGUAGE",
            "'''",
            "DOCSTRING",
            "'''",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
        ]
    },
    "CodeReviewHuman": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Test Code Reviewer",
        "phase_prompt": [
            "According to the new user's task, our designed product modality and three creative ideas, our developed first-edition source codes are listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes: ",
            "\"{codes}\"",
            "Comments on Codes:",
            "\"{comments}\"",
            "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
            "FILENAME",
            "```LANGUAGE",
            "'''",
            "DOCSTRING",
            "'''",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the fixed codes strictly following the required format."
        ]
    },
    "TestErrorSummary": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Software Test Engineer",
        "phase_prompt": [
            "Our developed source codes and corresponding test reports are listed below: ",
            "Programming Language: \"{language}\"",
            "Source Codes:",
            "\"{codes}\"",
            "Test Reports of Source Codes:",
            "\"{test_reports}\"",
            "According to my test reports, please locate and summarize the bugs that cause the problem."
        ]
    },
    "TestModification": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Software Test Engineer",
        "phase_prompt": [
            "Our developed source codes and corresponding test reports are listed below: ",
            "Programming Language: \"{language}\"",
            "Source Codes:",
            "\"{codes}\"",
            "Test Reports of Source Codes:",
            "\"{test_reports}\"",
            "Error Summary of Test Reports:",
            "\"{error_summary}\"",
            "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "'''",
            "DOCSTRING",
            "'''",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify the codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the error summary. Output the codes that you fixed based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
        ]
    },
    "EnvironmentDoc": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Technology Officer",
        "phase_prompt": [
            "The new user's task and our developed codes are listed: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes: ",
            "\"{codes}\"",
            "As the {assistant_role}, you should write a requirements.txt file, which is commonly used in Python projects to specify the dependencies or packages required for the project to run properly. It serves as a way to document and manage the project's dependencies in a standardized format. For example:",
            "requirements.txt",
            "```",
            "numpy==1.19.2",
            "pandas>=1.1.4",
            "```",
            "According to the codes and file format listed above, write a requirements.txt file to specify the dependencies or packages required for the project to run properly."
        ]
    },
    "Manual": {
        "assistant_role_name": "Chief Product Officer",
        "user_role_name": "Chief Executive Officer",
        "phase_prompt": [
            "The new user's task, our developed codes and required dependencies are listed: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes: ",
            "\"{codes}\"",
            "Requirements:",
            "\"{requirements}\"",
            "As the {assistant_role}, by using Markdown, you should write a manual.md file which is a detailed user manual to use the software, including introducing main functions of the software, how to install environment dependencies and how to use/play it. For example:",
            "manual.md",
            "```",
            "# LangChain",
            "Building applications with LLMs through composability",
            "Looking for the JS/TS version? Check out LangChain.js.",
            "**Production Support:** As you move your LangChains into production, we'd love to offer more comprehensive support.",
            "Please fill out this form and we'll set up a dedicated support Slack channel.",
            "## Quick Install",
            "`pip install langchain`",
            "or",
            "`conda install langchain -c conda-forge`",
            "## 🤔 What is this?",
            "Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. However, using these LLMs in isolation is often insufficient for creating a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.",
            "This library aims to assist in the development of those types of applications. Common examples of these applications include:",
            "**❓ Question Answering over specific documents**",
            "- Documentation",
            "- End-to-end Example: Question Answering over Notion Database",
            "**🤖 Agents**",
            "- Documentation",
            "- End-to-end Example: GPT+WolframAlpha",
            "## 📖 Documentation",
            "Please see [here](https://python.langchain.com) for full documentation on:",
            "- Getting started (installation, setting up the environment, simple examples)",
            "- How-To examples (demos, integrations, helper functions)",
            "- Reference (full API docs)",
            "- Resources (high-level explanation of core concepts)",
            "```"
        ]
    }
}